# ADMIN (SpringApplicationAdminJmxAutoConfiguration)
spring.application.admin.enabled=true
spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.

##Database
spring.datasource.url=jdbc:postgresql://localhost:5432/psycho_project
spring.datasource.username=postgres
spring.datasource.password=1234567
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

#logging.level.org.hibernate.SQL=debug
#logging.level.org.hibernate.type=trace

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

#batch
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.jdbc.batch_size=3
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=false

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

###cache
#spring.jpa.properties.hibernate.cache.use_second_level_cache=true
#spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
#spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE

fixed-rate.in.milliseconds=5000
fixed-delay.in.milliseconds=5000
cron.expression=0/1 * * * * ?

spring.mvc.pathmatch.matching-strategy= ant_path_matcher

# Upload and Download
# max file size
spring.servlet.multipart.max-file-size=10MB
# max request size
spring.servlet.multipart.max-request-size=10MB
# files storage location (stores all files uploaded via REST API)
storage.location=./uploads

### Kafka
#kafka.bootstrapAddress=localhost:9092
#spring.kafka.bootstrap-servers=localhost:9092
###Producer Serialization:
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringDeserializer
#
###Consumer Deserialization:
#spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.group-id=myGroupId
#spring.kafka.consumer.enable-auto-commit=false
#spring.kafka.listener.missing-topics-fatal=false

#spring.mvc.converters.preferred-json-mapper=gson #Preferred JSON mapper to use for HTTP message conversion

